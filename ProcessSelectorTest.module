<?php

/**
 * ProcessWire Selector Test
 * 
 * ProcessSelectorTest is an admin module to help building selectors that return what's expected.
 * This module also creates a page in the ProcessWire admin to run itself from.
 *
 * Module has been built based on an example (ProcessHello) by Ryan Cramer.
 *
 * @copyright Copyright (c) 2012, Niklas Lakanen
 *
 */

class ProcessSelectorTest extends Process {

	// The name that will be used for the page this module creates
	const pageName = 'selector-test';
    
    // Default limit for finding pages
    const defaultLimit = 25;

    // View (TemplateFile)
    private $view;

	/**
	 * Return information about this module (required)
	 * 
	 * @return array
	 * 
	 */
    static public function getModuleInfo() {
        return array(
            'title' => 'Selector test',
            'summary' => 'Test and build selectors without editing a template file',
            'version' => 100
        );
    }

 	/**
	 * Initialization (called before any execute functions)
	 *
	 */
	public function init() {
         // call parent's init (required)
		parent::init();
        
        // load view template
        $this->view = new TemplateFile($this->config->paths->{$this->className} . "view.php");

        // init some vars (so that view may print them out as is)
        $this->view->usedSelector = '';
        $this->view->pager = '';
	}

    /**
     * Render input form
     *
     * Previous selections are preserved.
     * 
     */
    public function renderInputForm() {

        // Form for input fields
		$form = $this->modules->get("InputfieldForm");
		$form->attr('id', 'selectortest_input_form');
		$form->attr('method', 'post');
		$form->attr('action', './');

        // Textarea for selector string
		$field = $this->modules->get("InputfieldTextarea");
		$field->attr('id+name', 'selectortest_selector');
		$field->label = $this->_("Selector to test");
        $field->value = wire('session')->get('selectortest_selector');
		$form->add($field);

        // Textfield for limit
   		$field = $this->modules->get("InputfieldInteger");
		$field->attr('id+name', 'selectortest_limit');
		$field->label = $this->_("Limit results");
        $field->description = $this->_("Adds 'limit=<nn>' to the selector string. Leave empty or use '0' (zero) to go without any additional limit. NOTE: This will override any previous limit given in the selector.");
        // preserve previous limit even if it's empty,
		// but use a default value at the very first time
		$limit = wire('session')->get('selectortest_limit');
        if(!is_null($limit)) {
            $field->value = $limit;
        } else {
            $field->value = self::defaultLimit;
        }
		$form->add($field);        

        // Submit button
		$field = $this->modules->get("InputfieldButton");
		$field->type = 'submit';
        $field->name = 'selectortest_submit';
		$field->value = $this->_("Run test");
		$form->add($field);

		$this->view->inputForm = $form->render();
    }
    
    /**
     * Main entry point
     *
     */
    public function ___execute() {

        // save selector and limit to session
        // (don't want to use GET parameters for selector string anyway)
        $this->saveQueryToSession();
    
        // always show the input form
        $this->renderInputForm();

        // is there a selector to execute?
        if(wire('session')->get('selectortest_selector')) {
            
            // input is passed forward *intentionally* as-is
            // --> validation errors are supposed to arise at this point (errors are cathced and displayed)
            try {
                $selector = wire('session')->get('selectortest_selector');

                // ..well, almost as-is: add limit if specified
                // ..and with limit + pagination additional offset may be added while building the query (at core, that is)
                if(wire('session')->get('selectortest_limit')) {
                    // display a warning if limit was specified by hand in the selector string as well
                    if(preg_match("/\blimit\s*=\s*(\d+)/", $selector, $matches)) {
                        // this IS just a warning
                        $this->error(
                            sprintf($this->_("Given limit (%d) overrides limit in selector string (%d)"),
                                    wire('session')->get('selectortest_limit'), $matches[1])
                        );
                    }
                    $selector = "$selector, limit=" . wire('session')->get('selectortest_limit');
                }
                
                // try to fetch results (exceptions are welcome and catched below)
                $results = wire('pages')->find($selector);
                $this->view->usedSelector = $selector;

                // generate the results table                
                $cnt = $results->getTotal();
                $this->view->resultCount = $cnt;
                if($cnt) {
                    // pager, if needed
                    if($cnt > $results->count()) $this->view->pager = $results->renderPager();
                    
                    $table = $this->modules->get("MarkupAdminDataTable");
                    $table->setEncodeEntities(false);
                    $table->headerRow(array(
                        $this->_('Id'),
                        $this->_('Title')
                    ));
                    foreach($results as $row) {
                        $vals = array($row->id);
                        $vals["{$row->title}"] = $row->url;
                        $table->row($vals);
                    }
                    $this->view->resultTable = $table->render();
                }
                                
            } catch (WireException $e) {                
                // did not succeed, show error message to the user
				$this->error($e->getMessage());
            }
        }
        return $this->view->render();
    }
    
    private function saveQueryToSession() {
        if($this->input->post->selectortest_submit) {
            wire('session')->set('selectortest_selector', $this->input->post->selectortest_selector);
            wire('session')->set('selectortest_limit', $this->input->post->selectortest_limit);
        }
    }
    
	/**
	 * Module installation
	 *
	 * Create a page under admin "Setup" page and attach this process to it
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName; 

		// installs to the admin "Setup" menu
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
        // check if the page already exists (--> throw an exception if it does)
        $existingPage = $page->parent->child("name={$page->name}, include=all");
        if($existingPage->id) {
			$this->error(sprintf($this->_("There is already a page at %s - maybe a previous installation?"), $existingPage->path));
            throw new WireException($this->_("Page already exists"));
        }
		$page->process = $this; 

        // page title from module info
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message(sprintf($this->_("Created page: %s - check it out!"), $page->path));
	}

	/**
	 * Module uninstallation
	 *
	 * Remove the installed page
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message(sprintf($this->_("Deleted page: %s"), $page->path));
			$page->delete();
		}
	}
}
